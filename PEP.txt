
Modern state management libraries like React and Redux are extremely powerful solutions for building front-end applications, but come with some significant pain points with respect to the amount of boilerplate code required for each library to compile and run.  Between Webpack, Babel, component definitions, component mounting, component lifecycles, and all the related connection code, "This is my React Hello World" has been a running joke/meme/frustration that has grown alongside the popularity of the framework. Indeed, with the release of React Hooks, which explicitly aims to reduce component complexity, "the boilerplate problem" appears to be influencing the evolution of the framework itself.

Borrowing from the Angular ecosystem, which has an officially maintained and extensive CLI, in 2016 the React team released "create-react-app" ("CRA") a library which allowed developers to generate entire React projects, and drove wider adoption of the framework despite its verbosity. Yet, as projects grow, and developers become more experienced in the framework, CRA begins to create another set of problems around its easy of use, which forces users to trade convenince for a decreased ability to control and configure the underlying packages which power their applications. Around the third minute of the first install, it also becomes clear that CRA is quite "bureaucratic," weighing in at 300 mbs, with dozens of libraries, and no less than two separate servers out of the box. It does come with a cool spinning icon when you boot the landing page though! 

Whats more, while it provides a kind of 'command line' solution to one set of problems- initializing a React application- it doesn't necessarily solve another set of problems- writing the application itself. Class components, stateless functional components, life-cycle methods, and now other, advanced functional/hook components- React's boilerplate requirements do not end after hello world is achieved.  One solution which I have used is the "React ES6 Snippets" library, which I like, but grew frustrated at during the third or fourth hour of trying to edit the Sublime codebase.

So, using Node.js and npm, lets build our own CLI that will have methods to generate the required configuration files- Webpack, Babel, package.json- as well as methods to generate some useful component code. This will give us immediate hello world of CRA without sacrificing flexiblility, so that the next time Facebook updates React, we can iterate on the code as we like. 

Also, since I don't have "react" in my path namespace, I'm just going to call this thing we're about to make "react." 

Sound good? Lets get started.

First and foremost, google "react boilerplate medium" and copy the code from the first thing that pops up. Just kidding! I'll do that for you:



